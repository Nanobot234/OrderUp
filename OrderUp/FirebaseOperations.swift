//
//  ViewModelFiles.swift
//  OrderUp
//
//  Created by Nana Bonsu on 7/5/23.
//

import Foundation
import FirebaseFirestore
import FirebaseStorage
import UIKit

class FirebaseManager:ObservableObject {
    
    let db = Firestore.firestore()
    let storageRef = Storage.storage().reference() //the Firebase storage reference for this application
    
    let currentDocumentKey = "FKWtvmmSzqL5kSliuKMJ" //this is the vendorID autogenerated by Firebase, will be different when using authentication!
    
    
    func writeToFirebase(itemName: String, itemDescription: String,itemPrice:Double,image:UIImage, itemID: String) {
        //shouldve jsut gotten the item object
        
       
        //the thing is this same image may be in firebase, so i guess, in furture if I have the user id, I will store the image by the itemID? and then delete the itemID image first
       let imageData = image.jpegData(compressionQuality: 0.5)!
        
        let itemPriceString = "\(itemPrice)"
        uploadItemImage(imageData: imageData, itemName: itemName) { imageUrl in
                self.db.collection("Vendors").document(self.currentDocumentKey).collection("Items").document(itemID).setData(["itemName":itemName, "itemDescription":itemDescription, "imageUrl":imageUrl, "itemPrice": itemPriceString])
//            else {
//                print("Things didnt uplaod try again!")
//            }
        
        }
        
        
        // now after this I should be uploadinf the image and then putting the correct URL in the database
    }
    
    func uploadItemImage(imageData: Data, itemName: String, completion: @escaping (String) -> ()){
        //let testVendorID = UUID().uuidString
        
        let imageRef = storageRef.child("VendorData/" + itemName + ".jpg")
        
        let uploadTasks = imageRef.putData(imageData, metadata: nil) { (metadata, err) in
            guard metadata != nil else {return }
            
            if let err = err {
                print(err.localizedDescription)
            }
        
            imageRef.downloadURL { url, err in
                //make srue you have the right url
                
                guard let downloadUrl = url else {
                    print("Url Not recieved")
                    return  }
                
                    
                completion(downloadUrl.absoluteString)
                //return the url here
            }
        }
        
    }
    
    
        //given the vendorID will be gettigng the orders here!!
    func getOrders() {
        
    }
    
    func deleteVendorItem(itemID:String, completion: @escaping (Bool) -> ()) {
        
        let itemRef = db.collection("Vendors").document(self.currentDocumentKey).collection("Items").document(itemID)
        
        itemRef.delete { error in
            if let error = error {
                            print("Error deleting item from Firebase: \(error)")
                            completion(false)
                        } else {
                            print("Item deleted from Firebase successfully.")
                            completion(true)
                        }
        }
    }
    
    //edit an item in firebase

    
    
   
}
